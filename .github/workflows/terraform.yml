name: 'tf deploy to snowflake'

on:
  push:
    branches:
    - main
  pull_request:
  
env:
  TF_VERSION: 0.12.20
#env:
  #ROOT_PATH: "${{github.workspace}}/terraform"


jobs:
  terraform_plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
   

    # Use the Bash shell regardless  whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/terraform-github-actions@master
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
       # INPUT_TF_ACTIONS_CLI_CREDENTIALS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        
        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      #working-directory: ${{env.ROOT_PATH}}
      


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        TF_VAR_SNW_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        TF_VAR_SNW_USER: ${{ secrets.SNOWFLAKE_USER }}
        TF_VAR_SNW_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      
      
        

      #working-directory: ${{env.ROOT_PATH}} 
      
  terraform_apply:
    name: 'Terraform apply'
    runs-on: ubuntu-latest
    needs: [terraform_plan]
    environment: PROD

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      #working-directory: ${{env.ROOT_PATH}}


    # Generates an execution plan for Terraform
    - name: Terraform Apply
      run: terraform apply --auto-approve
      #working-directory: ${{env.ROOT_PATH}} 
      

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    